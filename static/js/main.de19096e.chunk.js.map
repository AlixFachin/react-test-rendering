{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CountComponent","props","countRef","useRef","useEffect","current","className","MemoCountComponent","React","memo","MemoPropsCountComponent","otherCountRef","stringFunction","JSON","stringify","data","App","useState","message","setMessage","exampleData","test","memoizedData","useMemo","s","split","reverse","join","memoizedCB","useCallback","type","placeholder","onChange","e","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAGA,SAASA,EAAeC,GACtB,IAAMC,EAAWC,iBAAO,GAIxB,OAHAC,qBAAU,WACRF,EAASG,QAAUH,EAASG,QAAU,KAEhC,qBAAKC,UAAU,UAAf,SACE,gDAAmBJ,EAASG,QAA5B,SAIZ,IAAME,EAAqBC,IAAMC,MAAM,SAACR,GACtC,IAAMC,EAAWC,iBAAO,GAIxB,OAHAC,qBAAU,WACRF,EAASG,QAAUH,EAASG,QAAU,KAEhC,qBAAKC,UAAU,UAAf,SACE,gDAAmBJ,EAASG,QAA5B,YAINK,EAA0BF,IAAMC,MAAM,SAACR,GAC3C,IAAMU,EAAgBR,iBAAO,GAK7B,OAHAC,qBAAU,WACRO,EAAcN,aAER,sBAAKC,UAAU,UAAf,UACE,gDAAmBK,EAAcN,QAAjC,OACA,6CAAgBJ,EAAMW,eANb,SAMT,OACA,wCAAWC,KAAKC,UAAUb,EAAMc,MAAhC,aAkCGC,MA9Bf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAAc,CAACC,KAAM,gBAErBC,EAAeC,mBAAQ,kBAAMH,IAAY,IAEzCR,EAAiB,SAACY,GAAD,OAAOA,EAAEC,MAAM,IAAIC,UAAUC,KAAK,KACnDC,EAAaC,sBAAYjB,EAAgB,IAE/C,OACE,sBAAKN,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,kDAEE,uBAAOwB,KAAK,OAAOC,YAAY,iBAAiBC,SAAW,SAACC,GAAD,OAAOd,EAAWc,EAAEC,OAAOC,UACtF,kCAAKjB,EAAL,UAEF,iCACE,oCAAM,kDAAwB,cAAClB,EAAD,IAA9B,OACA,oCAAM,uCAAS,2CAAqB,cAACO,EAAD,OACpC,oCAAM,uCAAS,wCAAT,kBAA0C,cAACG,EAAD,CAAyBK,KAAMK,EAAaR,eAAgBA,OAC5G,oCAAM,uCAAS,wCAAT,SAAgC,2CAAhC,2BAA6E,cAACF,EAAD,CAAyBK,KAAMO,EAAcV,eAAgBA,OAChJ,oCAAM,uCAAS,wCAAT,SAAgC,2CAAhC,QAAyD,kDAA4B,cAACF,EAAD,CAAyBK,KAAMO,EAAcV,eAAgBgB,cC9CjJQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.de19096e.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef, useMemo, useCallback} from 'react';\nimport './App.css';\n\nfunction CountComponent(props) {\n  const countRef = useRef(0);\n  useEffect(() => {\n    countRef.current = countRef.current + 1;\n  });\n  return (<div className=\"counter\">\n            <p>Current count: {countRef.current} </p>\n          </div>);\n}\n\nconst MemoCountComponent = React.memo( (props) =>  {\n  const countRef = useRef(0);\n  useEffect(() => {\n    countRef.current = countRef.current + 1;\n  });\n  return (<div className=\"counter\">\n            <p>Current count: {countRef.current} </p>\n          </div>);\n});\n\nconst MemoPropsCountComponent = React.memo( (props) => {\n  const otherCountRef = useRef(0);\n  const testString = 'hello';\n  useEffect(() => {\n    otherCountRef.current++;\n  });\n  return (<div className=\"counter\">\n            <p>Current count: {otherCountRef.current} </p>\n            <p> Function:  {props.stringFunction(testString)} </p>\n            <p> Data: {JSON.stringify(props.data)} </p>\n          </div>);\n});\n\nfunction App() {\n  const [message, setMessage] = useState(\"\");\n\n  const exampleData = {test: \"Oui Monsieur\"};\n  // eslint-disable-next-line\n  const memoizedData = useMemo(() => exampleData,[]);\n\n  const stringFunction = (s) => s.split(\"\").reverse().join(\"\");\n  const memoizedCB = useCallback(stringFunction, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Testing rendering of React components\n        <input type=\"text\" placeholder=\"Type something\" onChange={ (e) => setMessage(e.target.value)  } />\n        <p> {message} </p>\n      </header>\n      <main>\n        <div> <p>Regular Component</p><CountComponent /> </div>\n        <div> <p>Using <code>memo</code></p><MemoCountComponent /></div>\n        <div> <p>Using <code>memo</code> with props </p><MemoPropsCountComponent data={exampleData} stringFunction={stringFunction} /></div>\n        <div> <p>Using <code>memo</code> with <code>useMemo</code> and regular function</p><MemoPropsCountComponent data={memoizedData} stringFunction={stringFunction} /></div>\n        <div> <p>Using <code>memo</code> with <code>useMemo</code> and <code>useCallback</code></p><MemoPropsCountComponent data={memoizedData} stringFunction={memoizedCB} /></div>\n        \n      </main>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}